/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.studyassist;

import javax.swing.*;

import static com.mycompany.studyassist.ExportOrNot.ExportQuestionPopup;
import static com.mycompany.studyassist.importExportMarks.arrayAdder;
import static com.mycompany.studyassist.removeMark.removeThatMark;
import static com.mycompany.studyassist.searchMark.markFinder;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author alex_
 */
public class Gui extends JFrame {
    static ArrayList<Mark> markArr = new ArrayList<>();
    ArrayList<String> topCourses;
    ArrayList<Double> topAverages;
    /**
     * Creates new form Gui
     */
    public Gui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new JLabel();
        jScrollPane1 = new JScrollPane();
        display = new JTextArea();
        courseCodeField = new JScrollPane();
        courseCodeTextField = new JTextArea();
        jLabel2 = new JLabel();
        nameField = new JScrollPane();
        nameTextField = new JTextArea();
        jLabel3 = new JLabel();
        jLabel5 = new JLabel();
        givenThinkingField = new JScrollPane();
        givenThinkingTextField = new JTextArea();
        jLabel7 = new JLabel();
        givenKnowleadgeField = new JScrollPane();
        givenKnowledgeTextField = new JTextArea();
        jLabel8 = new JLabel();
        maxThinkingFIeld = new JScrollPane();
        maxThinkingTextField = new JTextArea();
        jLabel9 = new JLabel();
        maxKnowleadgeField = new JScrollPane();
        maxKnowledgeTextField = new JTextArea();
        maxCommunicationField = new JScrollPane();
        maxCommunicationTextField = new JTextArea();
        jLabel10 = new JLabel();
        jScrollPane11 = new JScrollPane();
        givenCommunicationTextField = new JTextArea();
        jLabel11 = new JLabel();
        jLabel12 = new JLabel();
        jScrollPane12 = new JScrollPane();
        maxApplicationTextField = new JTextArea();
        givenApplicationField = new JScrollPane();
        givenApplicationTextField = new JTextArea();
        jLabel13 = new JLabel();
        addMarkButton = new Button();
        searchMarkButton = new Button();
        overallAverageButton = new Button();
        top6AverageButton = new Button();
        removeMarkButton = new Button();
        exitButton = new Button();
        jLabel14 = new JLabel();
        maxKnowleadgeField1 = new JScrollPane();
        weightKnowledgeTextField = new JTextArea();
        maxCommunicationField1 = new JScrollPane();
        weightApplicationTextField = new JTextArea();
        jLabel15 = new JLabel();
        jLabel16 = new JLabel();
        weightCommunicationField = new JScrollPane();
        weightCommunicationTextField = new JTextArea();
        jLabel17 = new JLabel();
        maxThinkingFIeld1 = new JScrollPane();
        weightThinkingTextField = new JTextArea();
        courseAverageButton = new Button();
        displayMarkButton = new Button();
        maxCommunicationField2 = new JScrollPane();
        maxCulminatingTextField = new JTextArea();
        jLabel18 = new JLabel();
        weightCommunicationField1 = new JScrollPane();
        givenCulminatingTextField = new JTextArea();
        jLabel19 = new JLabel();
        weightCulminatingField = new JScrollPane();
        weightCulminatingTextField = new JTextArea();
        jLabel20 = new JLabel();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setFont(new Font("Comic Sans MS", 0, 36)); // NOI18N

        jLabel1.setFont(new Font("Comic Sans MS", 0, 36)); // NOI18N
        jLabel1.setText("StudyAssist");
        jLabel1.setAlignmentY(0.0F);
        jLabel1.setAutoscrolls(true);

        display.setEditable(false);
        display.setColumns(20);
        display.setRows(5);
        jScrollPane1.setViewportView(display);

        courseCodeTextField.setColumns(5);
        courseCodeTextField.setRows(1);
        courseCodeField.setViewportView(courseCodeTextField);

        jLabel2.setText("Course Code");

        nameTextField.setColumns(5);
        nameTextField.setRows(1);
        nameField.setViewportView(nameTextField);

        jLabel3.setText("Assignment Name");

        jLabel5.setText("Given Knowledge");

        givenThinkingTextField.setColumns(5);
        givenThinkingTextField.setRows(1);
        givenThinkingField.setViewportView(givenThinkingTextField);

        jLabel7.setText("Given Thinking");

        givenKnowledgeTextField.setColumns(5);
        givenKnowledgeTextField.setRows(1);
        givenKnowleadgeField.setViewportView(givenKnowledgeTextField);

        jLabel8.setText("Given Application");

        maxThinkingTextField.setColumns(5);
        maxThinkingTextField.setLineWrap(true);
        maxThinkingTextField.setRows(1);
        maxThinkingFIeld.setViewportView(maxThinkingTextField);

        jLabel9.setText("Max Thinking");

        maxKnowledgeTextField.setColumns(5);
        maxKnowledgeTextField.setRows(1);
        maxKnowleadgeField.setViewportView(maxKnowledgeTextField);

        maxCommunicationTextField.setColumns(5);
        maxCommunicationTextField.setRows(1);
        maxCommunicationField.setViewportView(maxCommunicationTextField);

        jLabel10.setText("Max Communication");

        givenCommunicationTextField.setColumns(5);
        givenCommunicationTextField.setRows(1);
        jScrollPane11.setViewportView(givenCommunicationTextField);

        jLabel11.setText("Max Knowledge");

        jLabel12.setText("Given Communication");

        maxApplicationTextField.setColumns(5);
        maxApplicationTextField.setRows(1);
        jScrollPane12.setViewportView(maxApplicationTextField);

        givenApplicationTextField.setColumns(5);
        givenApplicationTextField.setRows(1);
        givenApplicationField.setViewportView(givenApplicationTextField);

        jLabel13.setText("Max Application");

        addMarkButton.setLabel("Add Mark");
        addMarkButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                addMarkButtonActionPerformed(evt);
            }
        });

        searchMarkButton.setLabel("Search Mark");
        searchMarkButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                searchMarkButtonActionPerformed(evt);
            }
        });

        overallAverageButton.setLabel("Overall Average");
        overallAverageButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                overallAverageButtonActionPerformed(evt);
            }
        });

        top6AverageButton.setLabel("Top 6 Average");
        top6AverageButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                top6AverageButtonActionPerformed(evt);
            }
        });

        removeMarkButton.setLabel("Remove Mark");
        removeMarkButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                removeMarkButtonActionPerformed(evt);
            }
        });

        exitButton.setActionCommand("Exit and Export");
        exitButton.setFont(new Font("Comic Sans MS", 0, 12)); // NOI18N
        exitButton.setLabel("Exit and Export");
        exitButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        jLabel14.setText("Weight Thinking");

        weightKnowledgeTextField.setColumns(5);
        weightKnowledgeTextField.setRows(1);
        maxKnowleadgeField1.setViewportView(weightKnowledgeTextField);

        weightApplicationTextField.setColumns(5);
        weightApplicationTextField.setRows(1);
        maxCommunicationField1.setViewportView(weightApplicationTextField);

        jLabel15.setText("Weight Communication");

        jLabel16.setText("Weight Knowledge");

        weightCommunicationTextField.setColumns(5);
        weightCommunicationTextField.setRows(1);
        weightCommunicationField.setViewportView(weightCommunicationTextField);

        jLabel17.setText("Weight Application");

        weightThinkingTextField.setColumns(5);
        weightThinkingTextField.setLineWrap(true);
        weightThinkingTextField.setRows(1);
        maxThinkingFIeld1.setViewportView(weightThinkingTextField);

        courseAverageButton.setLabel("Course Average");
        courseAverageButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                courseAverageButtonActionPerformed(evt);
            }
        });

        displayMarkButton.setLabel("Display All Marks");
        displayMarkButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                displayMarkButtonActionPerformed(evt);
            }
        });

        maxCulminatingTextField.setColumns(5);
        maxCulminatingTextField.setRows(1);
        maxCommunicationField2.setViewportView(maxCulminatingTextField);

        jLabel18.setText("Given Culminating");

        givenCulminatingTextField.setColumns(5);
        givenCulminatingTextField.setRows(1);
        weightCommunicationField1.setViewportView(givenCulminatingTextField);

        jLabel19.setText("Max Culminating");

        weightCulminatingTextField.setColumns(5);
        weightCulminatingTextField.setLineWrap(true);
        weightCulminatingTextField.setRows(1);
        weightCulminatingField.setViewportView(weightCulminatingTextField);

        jLabel20.setText("Weight Culminating");

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(293, 293, 293)
                        .addComponent(exitButton, GroupLayout.PREFERRED_SIZE, 97, GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 515, GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(6, 6, 6)
                                                .addComponent(weightCommunicationField, GroupLayout.PREFERRED_SIZE, 111, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(maxCommunicationField1, GroupLayout.PREFERRED_SIZE, 111, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(maxThinkingFIeld1, GroupLayout.PREFERRED_SIZE, 109, GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel15)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel17)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel14)))
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                            .addComponent(maxKnowleadgeField1, GroupLayout.PREFERRED_SIZE, 120, GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel16)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(8, 8, 8)
                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addComponent(courseCodeField, GroupLayout.PREFERRED_SIZE, 111, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel2, GroupLayout.PREFERRED_SIZE, 76, GroupLayout.PREFERRED_SIZE))
                                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(nameField, GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                                                        .addComponent(jLabel3, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                                .addGroup(GroupLayout.Alignment.TRAILING, layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                    .addComponent(jScrollPane12, GroupLayout.PREFERRED_SIZE, 111, GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(givenApplicationField, GroupLayout.PREFERRED_SIZE, 111, GroupLayout.PREFERRED_SIZE)))
                                            .addComponent(jScrollPane11, GroupLayout.PREFERRED_SIZE, 111, GroupLayout.PREFERRED_SIZE)
                                            .addComponent(maxCommunicationField, GroupLayout.PREFERRED_SIZE, 111, GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel10)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel13, GroupLayout.PREFERRED_SIZE, 92, GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(givenThinkingField, GroupLayout.PREFERRED_SIZE, 111, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(givenKnowleadgeField, GroupLayout.PREFERRED_SIZE, 111, GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                    .addComponent(maxThinkingFIeld, GroupLayout.PREFERRED_SIZE, 111, GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel9, GroupLayout.PREFERRED_SIZE, 76, GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel11)
                                                    .addComponent(maxKnowleadgeField, GroupLayout.PREFERRED_SIZE, 111, GroupLayout.PREFERRED_SIZE)))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel12)
                                        .addGap(9, 9, 9)
                                        .addComponent(jLabel8, GroupLayout.PREFERRED_SIZE, 102, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel7, GroupLayout.PREFERRED_SIZE, 111, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel5, GroupLayout.PREFERRED_SIZE, 111, GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel18)
                                    .addComponent(maxCommunicationField2, GroupLayout.PREFERRED_SIZE, 111, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel20)
                                    .addComponent(weightCulminatingField, GroupLayout.PREFERRED_SIZE, 114, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel19)
                                    .addComponent(weightCommunicationField1, GroupLayout.PREFERRED_SIZE, 111, GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(addMarkButton, GroupLayout.PREFERRED_SIZE, 111, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchMarkButton, GroupLayout.PREFERRED_SIZE, 111, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(courseAverageButton, GroupLayout.PREFERRED_SIZE, 111, GroupLayout.PREFERRED_SIZE)
                                        .addGap(15, 15, 15)
                                        .addComponent(top6AverageButton, GroupLayout.PREFERRED_SIZE, 111, GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(removeMarkButton, GroupLayout.PREFERRED_SIZE, 111, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(displayMarkButton, GroupLayout.PREFERRED_SIZE, 111, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(overallAverageButton, GroupLayout.PREFERRED_SIZE, 111, GroupLayout.PREFERRED_SIZE)))))
                        .addGap(14, 14, 14)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(exitButton, GroupLayout.PREFERRED_SIZE, 47, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, GroupLayout.Alignment.TRAILING)
                    .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
                                .addGap(3, 3, 3)
                                .addComponent(nameField, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
                                .addGap(3, 3, 3)
                                .addComponent(courseCodeField, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE)))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel18, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                    .addComponent(givenKnowleadgeField, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(givenThinkingField, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel12, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
                                .addGap(3, 3, 3)
                                .addComponent(jScrollPane11, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
                                .addGap(3, 3, 3)
                                .addComponent(givenApplicationField, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE))
                            .addComponent(weightCommunicationField1, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel10, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel13, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel19, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE))
                                .addGap(3, 3, 3)
                                .addComponent(maxCommunicationField, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane12, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE)
                            .addComponent(maxThinkingFIeld, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE)
                            .addComponent(maxKnowleadgeField, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE)
                            .addComponent(maxCommunicationField2, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addComponent(maxKnowleadgeField1, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel15, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel17, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel14, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel16, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel20, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                    .addComponent(weightCommunicationField, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(maxThinkingFIeld1, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(maxCommunicationField1, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE)))
                            .addComponent(weightCulminatingField, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(searchMarkButton, GroupLayout.PREFERRED_SIZE, 52, GroupLayout.PREFERRED_SIZE)
                            .addComponent(addMarkButton, GroupLayout.PREFERRED_SIZE, 52, GroupLayout.PREFERRED_SIZE)
                            .addComponent(courseAverageButton, GroupLayout.PREFERRED_SIZE, 52, GroupLayout.PREFERRED_SIZE)
                            .addComponent(top6AverageButton, GroupLayout.PREFERRED_SIZE, 52, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(overallAverageButton, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 52, GroupLayout.PREFERRED_SIZE)
                            .addGroup(GroupLayout.Alignment.TRAILING, layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(removeMarkButton, GroupLayout.PREFERRED_SIZE, 52, GroupLayout.PREFERRED_SIZE)
                                .addComponent(displayMarkButton, GroupLayout.PREFERRED_SIZE, 52, GroupLayout.PREFERRED_SIZE)))
                        .addGap(67, 67, 67))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void courseAverageButtonActionPerformed(ActionEvent evt) {
        // Define variables and get the course average that need to be searched
        String course = courseCodeTextField.getText();
        double dailyMark = 0;
	double culminatingMark = 0;
        double dailyWeight = 0;
        double culminatingWeight = 0;
        // To check if the course was found in the array
        boolean found = false;
        String text = "";
        
        // Average Calculation when assuming the ktca sections are weighted equally
        // Loop through the array list to calculate the weighted marks and weights
        for (Mark item : markArr) {
            /// Compare course codes to find the matching course
            String courseCode = item.getCourseCode();
            if (course.equals(courseCode)) {
                found = true;
                // Accumulate the weighted marks and weights
                // Accumulate the weighted marks and weights
        if(item.getKMaxMark() > 0){
            dailyMark = dailyMark + item.getKMark() / item.getKMaxMark() * item.getKWeight();
        }
		if(item.getTMaxMark() > 0){
            dailyMark = dailyMark + item.getTMark() / item.getTMaxMark() * item.getTWeight();
        }
		if(item.getCMaxMark() > 0){
            dailyMark = dailyMark + item.getCMark() / item.getCMaxMark() * item.getCWeight();
        }
		if(item.getAMaxMark() > 0){
            dailyMark = dailyMark + item.getAMark() / item.getAMaxMark() * item.getAWeight();
        }
        dailyWeight = dailyWeight + item.getKWeight() + item.getTWeight() + item.getCWeight() + item.getAWeight();
        if(item.getCulminatingMaxMark() > 0){
            culminatingMark = culminatingMark + item.getCulminatingMark() / item.getCulminatingMaxMark() * item.getCulminatingWeight();
            culminatingWeight = culminatingWeight + item.getCulminatingWeight();
        }
		
		}
	}
        
        // Calculate the averages if the weights are valid


        double courseAverage = 0;
        double dailyAverage = 0;
        double culminatingAverage = 0;
        
        if(dailyWeight > 0){
            dailyAverage = dailyMark / dailyWeight * 100; 
        }
        if(culminatingWeight>0){
            culminatingAverage = culminatingMark / culminatingWeight * 100;  
        }
        if(culminatingAverage>0){
             courseAverage = dailyAverage * 0.7 + culminatingAverage * 0.3;
        }
        
        
        // Display a message if the course was not found
        if (!found) {
            display.setText("The course is not found.");
            return;
        }
        
        // Check for invalid weights and display according messages
        if (dailyWeight <= 0 || culminatingWeight <= 0){
            if (dailyWeight <= 0){
                text += "You don't have any assignments with weightings in KTCA.\nThe culminating average is used as your overall average.";
                text += "\n";
                text += String.format("Course Code: %s\nDaily Average: N/A\nCulminating Average: %.1f%%\nCourse Average: %.1f%%",
                course, culminatingAverage,culminatingAverage);
            }
            if (culminatingWeight <= 0){
                text += "You don't have any assignments with culminating weightings.\nThe daily average is used as your overall average.";
                text += "\n";
                text += String.format("Course Code: %s\nDaily Average: %.1f%%\nCulminating Average: N/A\nCourse Average: %.1f%%",
                course,dailyAverage, dailyAverage);
            }
        } else {
            // Display the calculated averages if weights are valid
            text += String.format("Course Code: %s\nDaily Average: %.1f%%\nCulminating Average: %.1f%%\nCourse Average: %.1f%%",
                    course,dailyAverage, culminatingAverage,courseAverage);
        }       
        
        // Display the result text
        if (dailyWeight <= 0 && culminatingWeight <= 0){
            display.setText("None of your assignments have any weightings. Average is not applicable.");
        } else {
            display.setText(text);
        }
        
        
        
    }

    private void displayMarkButtonActionPerformed(ActionEvent evt) {
        // Define a beginning text
        String text = "All Existing Assignments:\n";
        
        // Error check for when the array list is empty
        if (markArr.size() <= 0){
            display.setText("You have no courses and assignments in the database yet.");
            return;
        }
        
        // Add all attributes of each mark into the text in clear format
        for (Mark item : markArr){
            text += "Course code: " + item.getCourseCode() + " ";
            text += "Assignment name: " + item.getAssignmentName() + "\n";
            text += String.format("Knowledge - Mark: %.1f, Max Mark: %.1f, Weight: %.1f\n", item.getKMark(), item.getKMaxMark(), item.getKWeight());
            text += String.format("Thinking - Mark: %.1f, Max Mark: %.1f, Weight: %.1f\n", item.getTMark(), item.getTMaxMark(), item.getTWeight());
            text += String.format("Communication - Mark: %.1f, Max Mark: %.1f, Weight: %.1f\n", item.getCMark(), item.getCMaxMark(), item.getCWeight());
            text += String.format("Application - Mark: %.1f, Max Mark: %.1f, Weight: %.1f\n", item.getAMark(), item.getAMaxMark(), item.getAWeight());
            text += String.format("Culminating - Mark: %.1f, Max Mark: %.1f, Weight: %.1f\n", item.getCulminatingMark(), item.getCulminatingMaxMark(), item.getCulminatingWeight());
            text += "\n";
        }
        // Display text
        display.setText(text);
    }

    private void addMarkButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_addMarkButtonActionPerformed
        // TODO add your handling code here:
        // Report error and return if any field is empty
        if (courseCodeTextField.getText().isEmpty() || nameTextField.getText().isEmpty() || givenKnowledgeTextField.getText().isEmpty() || maxKnowledgeTextField.getText().isEmpty() 
            || weightKnowledgeTextField.getText().isEmpty() || givenThinkingTextField.getText().isEmpty() || maxThinkingTextField.getText().isEmpty() || weightThinkingTextField.getText().isEmpty()
            || givenCommunicationTextField.getText().isEmpty() || maxCommunicationTextField.getText().isEmpty() || weightCommunicationTextField.getText().isEmpty() || givenApplicationTextField.getText().isEmpty()
            || maxApplicationTextField.getText().isEmpty() || weightApplicationTextField.getText().isEmpty() || givenCulminatingTextField.getText().isEmpty() || maxCulminatingTextField.getText().isEmpty()
            || weightCulminatingTextField.getText().isEmpty()) {
            display.setText("You left a piece of information empty. \nSet the weight as 0 if you don't have a mark for any sections on the assignment.");
            return;
        }
        // Trim and get the course code and assignment name
        String courseCode = courseCodeTextField.getText().trim();
	String assignmentName = nameTextField.getText().trim();
        
        // Check if course code or assignment name contains only numbers
        if (stringCheck(courseCode) || stringCheck(assignmentName)){
            display.setText("Your course code or assignment name cannot be pure numbers.");
            return;
        }
        
        // Check if course code or assignment name contains only numbers
        if (assignmentExists(courseCode, assignmentName)){
            display.setText("The assignment already exists in this course.");
            return;
        }
        
        try{
            // Parse and validate each section's inputs
            double kMark = Double.parseDouble(givenKnowledgeTextField.getText().trim());
            double kMaxMark = Double.parseDouble(maxKnowledgeTextField.getText().trim());
            double kWeight = Double.parseDouble(weightKnowledgeTextField.getText().trim());
		
            if (kMark < 0 || kWeight < 0 || kMaxMark < kMark) {
                display.setText("Invalid input for Knowledge section. Ensure marks are non-negative,\nweights are non-negative, and max marks are greater than or equal to given marks.");
                return;
            }
        
            double tMark = Double.parseDouble(givenThinkingTextField.getText().trim());
            double tMaxMark = Double.parseDouble(maxThinkingTextField.getText().trim());
            double tWeight = Double.parseDouble(weightThinkingTextField.getText().trim());
		
            if (tMark < 0 || tWeight < 0 || tMaxMark < tMark) {
                display.setText("Invalid input for Thinking section. Ensure marks are non-negative,\nweights are non-negative, and max marks are greater than or equal to given marks.");
                return;
            }
        
            double cMark = Double.parseDouble(givenCommunicationTextField.getText().trim());
            double cMaxMark = Double.parseDouble(maxCommunicationTextField.getText().trim());
            double cWeight = Double.parseDouble(weightCommunicationTextField.getText().trim());
		
            if (cMark < 0 || cWeight < 0 || cMaxMark < cMark) {
                display.setText("Invalid input for Communication section. Ensure marks are non-negative,\nweights are non-negative, and max marks are greater than or equal to given marks.");
                return;
            }
        
            double aMark = Double.parseDouble(givenApplicationTextField.getText().trim());
            double aMaxMark = Double.parseDouble(maxApplicationTextField.getText().trim());
            double aWeight = Double.parseDouble(weightApplicationTextField.getText().trim());
		
            if (aMark < 0 || aWeight < 0 || aMaxMark < aMark) {
                display.setText("Invalid input for Application section. Ensure marks are non-negative,\nweights are non-negative, and max marks are greater than or equal to given marks.");
                return;
            }
               
            double culminatingMark = Double.parseDouble(givenCulminatingTextField.getText().trim());
            double culminatingMaxMark = Double.parseDouble(maxCulminatingTextField.getText().trim());
            double culminatingWeight = Double.parseDouble(weightCulminatingTextField.getText().trim());
                
            if (culminatingMark < 0 || culminatingWeight < 0 || culminatingMaxMark < culminatingMark) {
                display.setText("Invalid input for Culminating section. Ensure marks are non-negative,\nweights are non-negative, and max marks are greater than or equal to given marks.");
                return;
            }
             
            // Create a new Mark object with the validated inputs
            Mark newMark = new Mark(courseCode, assignmentName, kMark, kMaxMark, kWeight, tMark, tMaxMark, tWeight, cMark, 
				cMaxMark, cWeight, aMark, aMaxMark, aWeight, culminatingMark, culminatingMaxMark, culminatingWeight);
		
            // Prepare the result text
            String text = "You added an assignment:\n";
            text += "Course code: " + newMark.getCourseCode() + " ";
            text += "Assignment name: " + newMark.getAssignmentName() + "\n";
            text += String.format("Knowledge - Mark: %.1f, Max Mark: %.1f, Weight: %.1f\n", newMark.getKMark(), newMark.getKMaxMark(), newMark.getKWeight());
            text += String.format("Thinking - Mark: %.1f, Max Mark: %.1f, Weight: %.1f\n", newMark.getTMark(), newMark.getTMaxMark(), newMark.getTWeight());
            text += String.format("Communication - Mark: %.1f, Max Mark: %.1f, Weight: %.1f\n", newMark.getCMark(), newMark.getCMaxMark(), newMark.getCWeight());
            text += String.format("Application - Mark: %.1f, Max Mark: %.1f, Weight: %.1f\n", newMark.getAMark(), newMark.getAMaxMark(), newMark.getAWeight());
            text += String.format("Culminating - Mark: %.1f, Max Mark: %.1f, Weight: %.1f\n", newMark.getCulminatingMark(), newMark.getCulminatingMaxMark(), newMark.getCulminatingWeight());
            
            // Display the result text and add mark to the array
            display.setText(text);
            markArr.add(newMark);
       
        } catch (NumberFormatException e) {
            // Display error if parsing fails
            display.setText("You must enter a number for the marks and weights.");
	}
    }//GEN-LAST:event_addMarkButtonActionPerformed

    private void exitButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // TODO add your handling code here:
        ExportQuestionPopup();
    }//GEN-LAST:event_exitButtonActionPerformed

    private void removeMarkButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_removeMarkButtonActionPerformed
        // TODO add your handling code here:
        removeThatMark();
    }//GEN-LAST:event_removeMarkButtonActionPerformed

    private void overallAverageButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_overallAverageButtonActionPerformed
        // TODO add your handling code here:
        // Define variables
        ArrayList<String> allCourses = new ArrayList<>();
        ArrayList<Double> allAverages = new ArrayList<>();
        double overallAverage = 0;
        String text = "";
        
        // Add all distinct course codes into an array list
        for (Mark item : markArr){
            String course = item.getCourseCode();
            if (!allCourses.contains(course)){
                allCourses.add(course);
            }
        }
        
        // Error check for if no courses are present
        if (allCourses.size() <= 0){
            display.setText("You don't have any courses yet. Try again later.");
            return;
        }
        
        // Average Calculation when assuming the ktca sections are weighted equally
        for (String course : allCourses) {
            double dailyMark = 0;
            double culminatingMark = 0;
            double dailyWeight = 0;
            double culminatingWeight = 0;
            
            // Calculate marks and weights for each course
            for (Mark item : markArr){
                if (course.equals(item.getCourseCode())) {
                    if(item.getKMaxMark() > 0){
                        dailyMark = dailyMark + item.getKMark() / item.getKMaxMark() * item.getKWeight();
                    }
                    if(item.getTMaxMark() > 0){
                        dailyMark = dailyMark + item.getTMark() / item.getTMaxMark() * item.getTWeight();
                    }
                    if(item.getCMaxMark() > 0){
                        dailyMark = dailyMark + item.getCMark() / item.getCMaxMark() * item.getCWeight();
                    }
                    if(item.getAMaxMark() > 0){
                        dailyMark = dailyMark + item.getAMark() / item.getAMaxMark() * item.getAWeight();
                    }
                    dailyWeight = dailyWeight + item.getKWeight() + item.getTWeight() + item.getCWeight() + item.getAWeight();
                    if(item.getCulminatingMaxMark() > 0){
                        culminatingMark = culminatingMark + item.getCulminatingMark() / item.getCulminatingMaxMark() * item.getCulminatingWeight();
                        culminatingWeight = culminatingWeight + item.getCulminatingWeight();
                    }
		}
            }
            
            // Calculate averages
            double courseAverage = 0;
            double dailyAverage = 0;
            double culminatingAverage = 0;

            if(dailyWeight > 0){
                dailyAverage = dailyMark / dailyWeight * 100;
            }
            
            if(culminatingWeight > 0){
                culminatingAverage = culminatingMark / culminatingWeight * 100;
            }
            
            if(culminatingAverage > 0){
                courseAverage = dailyAverage * 0.7 + culminatingAverage * 0.3;
            }
            
            // Check for zero weights and report errors, add available averages into the array list
            if (dailyWeight <= 0 || culminatingWeight <= 0) {
                if (dailyWeight <= 0 && culminatingWeight <= 0){
                    text += "None of your assignments in course code " + course + " have any weightings. Average set to 0.\n";
                    text += "\n";
                    allAverages.add(0.);
                } else if (dailyWeight <= 0) {
                    text += "Course code: " + course + " has no assignments with daily weightings.\nThe culminating average is used as your overall average.\n";
                    text += "\n";
                    allAverages.add(culminatingAverage);
                } else if (culminatingWeight <= 0) {
                    text += "Course code: " + course + " has no assignments with culminating weightings.\nThe daily average is used as your overall average.\n";
                    text += "\n";
                    allAverages.add(dailyAverage);
                }      
            } else {
                allAverages.add(courseAverage);
            }
	}
        
        // Calculate overall average
        for (double average : allAverages){
            overallAverage += average;
        }
        overallAverage =  overallAverage / allCourses.size();
        
        // Write result display text
        for (int i = 0; i < allCourses.size(); i++){
            text += "Course code: " + allCourses.get(i) + " ";
            text += String.format("Course Average: %.1f%%\n", allAverages.get(i));
        }
        text += String.format("Overall Average: %.1f%%\n", overallAverage);
        
        // Display results
        display.setText(text);
    }//GEN-LAST:event_overallAverageButtonActionPerformed

    private void searchMarkButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_searchMarkButtonActionPerformed
        // TODO add your handling code here:
        markFinder();
    }//GEN-LAST:event_searchMarkButtonActionPerformed

    private void top6AverageButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_top6AverageButtonActionPerformed
        // TODO add your handling code here:
        // Define some variables and start two new empty array lists 
        topCourses = new ArrayList<>();
        topAverages = new ArrayList<>();
        double overallAverage = 0;
        String text = "";
        
        // Add each distinct course code into the array list
        for (Mark item : markArr){
            String course = item.getCourseCode();
            if (!topCourses.contains(course)){
                topCourses.add(course);
            }
        }
        
        // Report error and return if less than six courses are entered
        if (topCourses.size() < 6){
            display.setText("You don't have six courses yet. Try again later.");
            return;
        }
        
        // Average Calculation when assuming the ktca sections are weighted equally
        for (String course : topCourses) {
            double dailyMark = 0;
            double culminatingMark = 0;
            double dailyWeight = 0;
            double culminatingWeight = 0;
            
            // Calculate the marks and weights of each course
            for (Mark item : markArr){
                if (course.equals(item.getCourseCode())) {
                    if(item.getKMaxMark() > 0){
                        dailyMark = dailyMark + item.getKMark() / item.getKMaxMark() * item.getKWeight();
                    }
                    if(item.getTMaxMark() > 0){
                        dailyMark = dailyMark + item.getTMark() / item.getTMaxMark() * item.getTWeight();
                    }
                    if(item.getCMaxMark() > 0){
                        dailyMark = dailyMark + item.getCMark() / item.getCMaxMark() * item.getCWeight();
                    }
                    if(item.getAMaxMark() > 0){
                        dailyMark = dailyMark + item.getAMark() / item.getAMaxMark() * item.getAWeight();
                    }
                    dailyWeight = dailyWeight + item.getKWeight() + item.getTWeight() + item.getCWeight() + item.getAWeight();
                    if(item.getCulminatingMaxMark() > 0){
                        culminatingMark = culminatingMark + item.getCulminatingMark() / item.getCulminatingMaxMark() * item.getCulminatingWeight();
                        culminatingWeight = culminatingWeight + item.getCulminatingWeight();
                    }
		}
            }
            
            // Calculate averages
            double courseAverage = 0;
            double dailyAverage = 0;
            double culminatingAverage = 0;

            if(dailyWeight > 0){
                dailyAverage = dailyMark / dailyWeight * 100;
            }
            
            if(culminatingWeight > 0){
                culminatingAverage = culminatingMark / culminatingWeight * 100;
            }
            
            courseAverage = dailyAverage * 0.7 + culminatingAverage * 0.3;
            
            // Check for zero weights and report errors, add available averages into the array list
            if (dailyWeight <= 0 || culminatingWeight <= 0) {
                if (dailyWeight <= 0 && culminatingWeight <= 0){
                    text += "None of your assignments in course code " + course + " have any weightings. Average set to 0.\n";
                    text += "\n";
                    topAverages.add(0.);
                } else if (dailyWeight <= 0) {
                    text += "Course code: " + course + " has no assignments with daily weightings.\nThe culminating average is used as your overall average.\n";
                    text += "\n";
                    topAverages.add(culminatingAverage);
                } else if (culminatingWeight <= 0) {
                    text += "Course code: " + course + " has no assignments with culminating weightings.\nThe daily average is used as your overall average.\n";
                    text += "\n";
                    topAverages.add(dailyAverage);
                }      
            } else {
                topAverages.add(courseAverage);
            }
	}
        
        // Sort courses based on averages
        recursiveQuickSort(0, topAverages.size() - 1);
        
        // Prepare text for the top six courses and their averages
        for (int i = 0; i < 6; i++){
            overallAverage += topAverages.get(i);
            text += "Course code: " + topCourses.get(i) + " ";
            text += String.format("Course Average: %.1f%%\n", topAverages.get(i));
        }
        
        overallAverage =  overallAverage / 6;
        text += String.format("Overall Average: %.1f%%\n", overallAverage);
        
        // Display final results
        display.setText(text);
    }//GEN-LAST:event_top6AverageButtonActionPerformed
    
    // Recursive quicksort method to sort elements between indexes
    private void recursiveQuickSort(int low, int high) {
        // To check that there are more than one elements being sorted
        if (low < high) {
            
            // Divide the array and get a pivot index
            int pivot = partition(low, high);
            
            // Recursively divide and conquer to sort the elements before and after the partition
            recursiveQuickSort(low, pivot - 1);
            recursiveQuickSort(pivot + 1, high);
        }
    }
    
    // Partition method to rearrange elements around the pivot
    private int partition(int low, int high) {
        // Choose the pivot element from the end of the array
        double pivot = topAverages.get(high);
        // Index of the smaller element
        int i = low - 1; 
    
        // Iterate through the array and rearrange elements based on the pivot
        for (int j = low; j < high; j++) {
            
            // If the current element is greater than the pivot
            if (topAverages.get(j) > pivot) {
                i++; 
                
                // Swap elements in topAverages
                Collections.swap(topAverages, i, j);
                
                // Swap corresponding elements in topCourses
                Collections.swap(topCourses, i, j);
            }
        }
        
    // Swap the pivot element to its correct position
    Collections.swap(topAverages, i + 1, high);
    Collections.swap(topCourses, i + 1, high);
    
    // Return the partitioning index
    return i + 1;
}
    
    // Method for string error checking
    public static boolean stringCheck(String str) {
        // Check for empty string, true represent the string has errors
	if (str == null || str.isEmpty()) {
	    return true;
	}
        // Try to parse the string as an integer
        try {
            Integer.parseInt(str);
            return true;
        } catch (NumberFormatException e) {
        // If parse integer is false, try parse double
            try {
                Double.parseDouble(str);
                return true;
            } catch (NumberFormatException ex) {
                // Return false for no errors found
                return false;
            }
        }
    }
	
    // Error check for if the user's input assignment already exists
    public static boolean assignmentExists(String code, String name) {
        // Loop through each item in the array list
        for (int i = 0; i < markArr.size(); i++) {
            Mark item = markArr.get(i);
            
            // Check if there are any matching names
            if (item.getCourseCode().equalsIgnoreCase(code) && item.getAssignmentName().equalsIgnoreCase(name)) {
                return true;
            }
        }
        // Return false as the input does not match any existing names
        return false;
    }
        
    // Method to check errors in doubles
    public static boolean invalidDecimal(double num) {
    	// Find the index of the decimal point
    	int dotIndex = String.valueOf(num).indexOf("."); 
    	
    	// Check for negative, true represent an error has occurred
    	if (num < 0) {
            return true;
    	}
        
    	// Exit case for when there is no decimal digits
        if (dotIndex == -1) {
            return false;
        }
     
        // Calculate the number of characters after the decimal point and compare 
        int decimalCount = String.valueOf(num).length() - dotIndex - 1;
        return decimalCount > 2;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gui().setVisible(true);
            }
        });

        try {
            arrayAdder();
        } catch (IOException e) {
            throw new RuntimeException(e);

        }
    }
    
    public static class Mark {
	    private String courseCode;
	    private String assignmentName;
	    
	    private double kMark;
	    private double kMaxMark;
	    private double kWeight;
	    
	    private double tMark;
	    private double tMaxMark;
	    private double tWeight;
	    
	    private double cMark;
	    private double cMaxMark;
	    private double cWeight;
	    
	    private double aMark;
	    private double aMaxMark;
	    private double aWeight;
	    
	    private double culminatingMark;
	    private double culminatingMaxMark;
	    private double culminatingWeight;
	    
	    // Constructor 
	    public Mark(String courseCode, String assignmentName, double kMark, double kMaxMark, double kWeight, double tMark, 
	    			double tMaxMark, double tWeight, double cMark, double cMaxMark, double cWeight, double aMark,
	                double aMaxMark, double aWeight, double culminatingMark, double culminatingMaxMark, double culminatingWeight) {
	    	
	        this.courseCode = courseCode;
	        this.assignmentName = assignmentName;
	        
	        this.kMark = kMark;
	        this.kMaxMark = kMaxMark;
	        this.kWeight = kWeight;
	        
	        this.tMark = tMark;
	        this.tMaxMark = tMaxMark;
	        this.tWeight = tWeight;
	        
	        this.cMark = cMark;
	        this.cMaxMark = cMaxMark;
	        this.cWeight = cWeight;
	        
	        this.aMark = aMark;
	        this.aMaxMark = aMaxMark;
	        this.aWeight = aWeight;
	        
	        this.culminatingMark = culminatingMark;
	        this.culminatingMaxMark = culminatingMaxMark;
	        this.culminatingWeight = culminatingWeight;
	    }

	    // Getter and Setter for courseCode
	    public String getCourseCode() {
	        return courseCode;
	    }

	    public void setCourseCode(String courseCode) {
	        this.courseCode = courseCode;
	    }
	    
	    // Getter and Setter for assignmentName
	    public String getAssignmentName() {
	        return assignmentName;
	    }

	    public void setAssignmentName(String assignmentName) {
	        this.assignmentName = assignmentName;
	    }

	    // Getter and Setter for kMark
	    public double getKMark() {
	        return kMark;
	    }

	    public void setKMark(double kMark) {
	        this.kMark = kMark;
	    }
	    
	    // Getter and Setter for kMaxMark
	    public double getKMaxMark() {
	        return kMaxMark;
	    }

	    public void setKMaxMark(double kMaxMark) {
	        this.kMaxMark = kMaxMark;
	    }
	    
	    // Getter and Setter for kWeight
	    public double getKWeight() {
	        return kWeight;
	    }

	    public void setKWeight(double kWeight) {
	        this.kWeight = kWeight;
	    }

	    // Getter and Setter for tMark
	    public double getTMark() {
	        return tMark;
	    }

	    public void setTMark(double tMark) {
	        this.tMark = tMark;
	    }
	    
	    // Getter and Setter for tMaxMark
	    public double getTMaxMark() {
	        return tMaxMark;
	    }

	    public void setTMaxMark(double tMaxMark) {
	        this.tMaxMark = tMaxMark;
	    }

	    // Getter and Setter for tWeight
	    public double getTWeight() {
	        return tWeight;
	    }

	    public void setTWeight(double tWeight) {
	        this.tWeight = tWeight;
	    }

	    // Getter and Setter for cMark
	    public double getCMark() {
	        return cMark;
	    }

	    public void setCMark(double cMark) {
	        this.cMark = cMark;
	    }
	    
	    // Getter and Setter for cMaxMark
	    public double getCMaxMark() {
	        return cMaxMark;
	    }

	    public void setCMaxMark(double cMaxMark) {
	        this.cMaxMark = cMaxMark;
	    }

	    // Getter and Setter for cWeight
	    public double getCWeight() {
	        return cWeight;
	    }

	    public void setCWeight(double cWeight) {
	        this.cWeight = cWeight;
	    }

	    // Getter and Setter for aMark
	    public double getAMark() {
	        return aMark;
	    }

	    public void setAMark(double aMark) {
	        this.aMark = aMark;
	    }
	    
	    // Getter and Setter for aMaxMark
	    public double getAMaxMark() {
	        return aMaxMark;
	    }

	    public void setAMaxMark(double aMaxMark) {
	        this.aMaxMark = aMaxMark;
	    }

	    // Getter and Setter for aWeight
	    public double getAWeight() {
	        return aWeight;
	    }

	    public void setAWeight(double aWeight) {
	        this.aWeight = aWeight;
	    }

	    // Getter and Setter for culminatingMark
	    public double getCulminatingMark() {
	        return culminatingMark;
	    }

	    public void setCulminatingMark(double culminatingMark) {
	        this.culminatingMark = culminatingMark;
	    }
	    
	    // Getter and Setter for culminatingMark
	    public double getCulminatingMaxMark() {
	        return culminatingMaxMark;
	    }

	    public void setCulminatingMaxMark(double culminatingMaxMark) {
	        this.culminatingMaxMark = culminatingMaxMark;
	    }

	    // Getter and Setter for culminatingWeight
	    public double getCulminatingWeight() {
	        return culminatingWeight;
	    }
	    
	    public void setCulminatingWeight(double culminatingWeight) {
	        this.culminatingWeight = culminatingWeight;
	    }
	    
	    public String toString() {
	    	return String.format("%s,%s,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f",
                    courseCode, assignmentName, kMark, kMaxMark, kWeight, tMark, tMaxMark, tWeight, cMark,
                    cMaxMark, cWeight, aMark, aMaxMark, aWeight, culminatingMark, culminatingMaxMark, culminatingWeight);
	    }
	        
	}

    // When opening/changing the ui, it will change the projected static elements, which breaks the searchMark.
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private Button addMarkButton;
    private Button courseAverageButton;
    private JScrollPane courseCodeField;
    protected static JTextArea courseCodeTextField;
    protected static JTextArea display;
    private Button displayMarkButton;
    private Button exitButton;
    private JScrollPane givenApplicationField;
    private JTextArea givenApplicationTextField;
    private JTextArea givenCommunicationTextField;
    private JTextArea givenCulminatingTextField;
    private JScrollPane givenKnowleadgeField;
    private JTextArea givenKnowledgeTextField;
    private JScrollPane givenThinkingField;
    private JTextArea givenThinkingTextField;
    private JLabel jLabel1;
    private JLabel jLabel10;
    private JLabel jLabel11;
    private JLabel jLabel12;
    private JLabel jLabel13;
    private JLabel jLabel14;
    private JLabel jLabel15;
    private JLabel jLabel16;
    private JLabel jLabel17;
    private JLabel jLabel18;
    private JLabel jLabel19;
    private JLabel jLabel2;
    private JLabel jLabel20;
    private JLabel jLabel3;
    private JLabel jLabel5;
    private JLabel jLabel7;
    private JLabel jLabel8;
    private JLabel jLabel9;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane11;
    private JScrollPane jScrollPane12;
    private JTextArea maxApplicationTextField;
    private JScrollPane maxCommunicationField;
    private JScrollPane maxCommunicationField1;
    private JScrollPane maxCommunicationField2;
    private JTextArea maxCommunicationTextField;
    private JTextArea maxCulminatingTextField;
    private JScrollPane maxKnowleadgeField;
    private JScrollPane maxKnowleadgeField1;
    private JTextArea maxKnowledgeTextField;
    private JScrollPane maxThinkingFIeld;
    private JScrollPane maxThinkingFIeld1;
    private JTextArea maxThinkingTextField;
    private JScrollPane nameField;
    protected static JTextArea nameTextField;
    private Button overallAverageButton;
    private Button removeMarkButton;
    private Button searchMarkButton;
    private Button top6AverageButton;
    private JTextArea weightApplicationTextField;
    private JScrollPane weightCommunicationField;
    private JScrollPane weightCommunicationField1;
    private JTextArea weightCommunicationTextField;
    private JScrollPane weightCulminatingField;
    private JTextArea weightCulminatingTextField;
    private JTextArea weightKnowledgeTextField;
    private JTextArea weightThinkingTextField;
    // End of variables declaration//GEN-END:variables
}
